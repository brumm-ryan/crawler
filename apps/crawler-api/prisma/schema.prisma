// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  workosUserId String      @unique @map("workos_user_id")
  email        String      @unique
  firstName    String?     @map("first_name")
  lastName     String?     @map("last_name")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  datasheets   Datasheet[]
  scans        Scan[]

  @@map("users")
}

model Datasheet {
  id         Int       @id @default(autoincrement())
  firstName  String
  middleName String?
  lastName   String
  age        Int
  userId     Int?
  user       User?     @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  addresses  Address[]
  phones     Phone[]
  emails     Email[]
  scans      Scan[]

  @@map("datasheets")
}

model Address {
  id          Int       @id @default(autoincrement())
  street      String
  city        String
  state       String
  zipCode     String    @map("zip_code")
  datasheetId Int
  datasheet   Datasheet @relation(fields: [datasheetId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("addresses")
}

model Phone {
  id          Int       @id @default(autoincrement())
  number      String
  type        String?
  datasheetId Int
  datasheet   Datasheet @relation(fields: [datasheetId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("phones")
}

model Email {
  id          Int       @id @default(autoincrement())
  address     String
  type        String?
  datasheetId Int
  datasheet   Datasheet @relation(fields: [datasheetId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("emails")
}

model Scan {
  id          Int          @id @default(autoincrement())
  externalId  String?      @map("external_id")
  status      String       @default("pending")
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  datasheetId Int
  datasheet   Datasheet    @relation(fields: [datasheetId], references: [id])
  results     ScanResult[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("scans")
}

model ScanResult {
  id          Int       @id @default(autoincrement())
  scanId      Int       @map("scan_id")
  scan        Scan      @relation(fields: [scanId], references: [id], onDelete: Cascade)
  piiSourceId Int?      @map("pii_source_id")
  piiSource   PiiSource? @relation(fields: [piiSourceId], references: [id])
  url         String
  status      String    // "success", "error", "timeout", etc.
  data        Json?     // Store the extracted data as JSON
  error       String?   // Error message if status is error
  metadata    Json?     // Additional metadata (response time, headers, etc.)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("scan_results")
}

model PiiSource {
  id           Int          @id @default(autoincrement())
  name         String       // Human-readable name for the source
  activityName String
  url          String       // Base URL of the PII source
  searchUrl    String       // Base URL with replacable query params
  type         String       // Type of source (e.g., "people_search", "social_media", "data_broker")
  isActive     Boolean      @default(true) @map("is_active")
  description  String?      // Optional description of what this source provides
  metadata     Json?        // Additional configuration or metadata
  scanResults  ScanResult[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@map("pii_sources")
}