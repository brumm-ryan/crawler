/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as PublicLoginImport } from './routes/_public.login'
import { Route as AuthenticatedMonitorImport } from './routes/_authenticated/monitor'
import { Route as AuthenticatedDatasheetImport } from './routes/_authenticated/datasheet'
import { Route as AuthenticatedDashboardImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedContactImport } from './routes/_authenticated/contact'
import { Route as AuthenticatedAboutImport } from './routes/_authenticated/about'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)

const AuthenticatedMonitorRoute = AuthenticatedMonitorImport.update({
  id: '/monitor',
  path: '/monitor',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedDatasheetRoute = AuthenticatedDatasheetImport.update({
  id: '/datasheet',
  path: '/datasheet',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedDashboardRoute = AuthenticatedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedContactRoute = AuthenticatedContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedAboutRoute = AuthenticatedAboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/about': {
      id: '/_authenticated/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AuthenticatedAboutImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/contact': {
      id: '/_authenticated/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof AuthenticatedContactImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/datasheet': {
      id: '/_authenticated/datasheet'
      path: '/datasheet'
      fullPath: '/datasheet'
      preLoaderRoute: typeof AuthenticatedDatasheetImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/monitor': {
      id: '/_authenticated/monitor'
      path: '/monitor'
      fullPath: '/monitor'
      preLoaderRoute: typeof AuthenticatedMonitorImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedAboutRoute: typeof AuthenticatedAboutRoute
  AuthenticatedContactRoute: typeof AuthenticatedContactRoute
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedDatasheetRoute: typeof AuthenticatedDatasheetRoute
  AuthenticatedMonitorRoute: typeof AuthenticatedMonitorRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAboutRoute: AuthenticatedAboutRoute,
  AuthenticatedContactRoute: AuthenticatedContactRoute,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedDatasheetRoute: AuthenticatedDatasheetRoute,
  AuthenticatedMonitorRoute: AuthenticatedMonitorRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface PublicRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/about': typeof AuthenticatedAboutRoute
  '/contact': typeof AuthenticatedContactRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/datasheet': typeof AuthenticatedDatasheetRoute
  '/monitor': typeof AuthenticatedMonitorRoute
  '/login': typeof PublicLoginRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PublicRouteWithChildren
  '/about': typeof AuthenticatedAboutRoute
  '/contact': typeof AuthenticatedContactRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/datasheet': typeof AuthenticatedDatasheetRoute
  '/monitor': typeof AuthenticatedMonitorRoute
  '/login': typeof PublicLoginRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_authenticated/about': typeof AuthenticatedAboutRoute
  '/_authenticated/contact': typeof AuthenticatedContactRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/datasheet': typeof AuthenticatedDatasheetRoute
  '/_authenticated/monitor': typeof AuthenticatedMonitorRoute
  '/_public/login': typeof PublicLoginRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/contact'
    | '/dashboard'
    | '/datasheet'
    | '/monitor'
    | '/login'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/contact'
    | '/dashboard'
    | '/datasheet'
    | '/monitor'
    | '/login'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_public'
    | '/_authenticated/about'
    | '/_authenticated/contact'
    | '/_authenticated/dashboard'
    | '/_authenticated/datasheet'
    | '/_authenticated/monitor'
    | '/_public/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/_public"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/about",
        "/_authenticated/contact",
        "/_authenticated/dashboard",
        "/_authenticated/datasheet",
        "/_authenticated/monitor"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/login"
      ]
    },
    "/_authenticated/about": {
      "filePath": "_authenticated/about.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/contact": {
      "filePath": "_authenticated/contact.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/dashboard": {
      "filePath": "_authenticated/dashboard.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/datasheet": {
      "filePath": "_authenticated/datasheet.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/monitor": {
      "filePath": "_authenticated/monitor.tsx",
      "parent": "/_authenticated"
    },
    "/_public/login": {
      "filePath": "_public.login.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
